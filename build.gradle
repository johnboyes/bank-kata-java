buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath(
                'org.junit.platform:junit-platform-gradle-plugin:1.0.2',
                'gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0'
        )
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.spotbugs'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile(
            'org.javamoney:moneta:1.1'
    )
    testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.0.2',
            'com.github.spotbugs:spotbugs:3.1.1'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.0.2',
            'org.junit.platform:junit-platform-launcher:1.0.2'
    )
    testCompileOnly(
            'org.apiguardian:apiguardian-api:1.0.0'
    )
}

task jacocoTestReportHack(type: JacocoReport) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates code coverage report for all Test tasks.'
    dependsOn junitPlatformTest

    sourceSets sourceSets.main
    executionData fileTree(buildDir).include('**/jacoco/*.exec')

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

afterEvaluate {
    def junitPlatformTest = tasks.junitPlatformTest

    jacoco {
        applyTo(junitPlatformTest)
    }

    task jacocoJunit5TestReport(type: JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            html.enabled true
        }
    }
}
